%-----Assign colors to regions----------

%Define available colors
color(red).
color(green).
color(blue).

%Adjacancy constraints(graph edges)
adjacent(a,b).
adjacent(a,c).
adjacent(b,c).
adjacent(b,d).
adjacent(c,d).
adjacent(c,e).
adjacent(d,f).
adjacent(e,f).

%symmetry : adjacancy is biconditional
neighbor(X, Y) :- adjacent(X, Y).
neighbor(X, Y) :- adjacent(Y, X).

% --- CSP Rule: assign colors to regions ---
map_coloring([(Region, Color)|Rest]) :-
    color(Color),
    map_coloring(Rest),
    \+ (member((OtherRegion,Color),Rest),neighbor(Region,OtherRegion)).
map_coloring([]).

?-map_coloring([(a, A), (b, B), (c, C), (d, D), (e, E), (f, F)]).
A = D, D = E, E = red,
B = F, F = green,
C = blue

%--------------N-Queen problem--------------------
%A permutation helper
perm([], []).
perm(L, [X|R]) :-
    select(X, L, L1), perm(L1, R).

%Safe if two queens are in same diagonal
safe([]).
safe([Q|Qs]) :- safe(Qs), no_attack(Q, Qs, 1).

no_attack(_, [], _).
no_attack(Q, [Q1|Qs], D) :-
    Q1-Q =\= D,
    Q -Q1 =\= D,
    D1 is D+1,
    no_attack(Q, Qs, D1).

%n-queens: rows = 1...N, find safe positions
queens(N, Qs):-
    numlist(1, N, Rows),
    perm(Rows, Qs),
    safe(Qs).
    
?-queens(4, Qs).
Qs = [2, 4, 1, 3]

%-----------Graph path finder----------------
edge(a,b).
edge(b,c).
edge(c,d).
edge(d,e).
edge(b,e).

path(X, Y, Path) :-
    travel(X,Y,[X],Path).

travel(X,X,Visited,Path) :-
    reverse(Visited,Path).

travel(X,Y,Visited,Path) :-
    edge(X,Z),
    \+ member(Z,Visited),
    travel(Z,Y,[Z|Visited],Path).
    
?-path(a,e,P).
P = [a, b, c, d, e]
    
